generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("UserRoles")
}

model Permission {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  action    String
  path      String
  permissionGroupId Int
  permissionGroup   PermissionGroup @relation(fields: [permissionGroupId], references: [id])
  roles     Role[]   @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionGroup {
  id          Int               @id @default(autoincrement())
  name        String
  parentId    Int?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  path        String            @default("default_path")
  permissions Permission[]
  parent      PermissionGroup?  @relation("PermissionGroupsToPermissionGroup", fields: [parentId], references: [id])
  children    PermissionGroup[] @relation("PermissionGroupsToPermissionGroup")
}

model User {
  id           Int       @id @default(autoincrement())
  firstName    String? 
  lastName     String?
  phoneNumber  String?   @unique 
  email        String?   @unique
  password     String?
  createdAt    DateTime  @default(now())
  status       String?
  username     String?
  gender       String?
  departmentId Int?
  updatedAt    DateTime  @updatedAt
  hashedRt     String?
  isAdmin      Boolean   @default(false)
  avatar       String?
  wechatId     String?   @unique
  miniWechatId String?
  articles     Article[]
  images       Image[]
  roles        Role[]    @relation("UserRoles")
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    Int?
  author      User?    @relation(fields: [authorId], references: [id])
}

model Image {
  id          Int      @id @default(autoincrement())
  description String
  area        String
  photos      String[]
  thumbnails  Json[]   // 存储不同尺寸的缩略图信息，包含 path, size, url
  location    Json?    // 存储GPS信息，包含 latitude 和 longitude
  stakeNumber String?  // 桩号，可选
  offset      Float?   // 偏距，可选
  category    String   @default("安全") // 分类：安全、质量、进度
  tags        String[] @default([])    // 标签数组
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@map("images")
}
