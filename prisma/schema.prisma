generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("UserRoles")
}

model Permission {
  id                Int             @id @default(autoincrement())
  name              String
  action            String
  path              String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  permissionGroupId Int
  permissionGroup   PermissionGroup @relation(fields: [permissionGroupId], references: [id])
  roles             Role[]          @relation("PermissionToRole")
}

model PermissionGroup {
  id          Int               @id @default(autoincrement())
  name        String
  parentId    Int?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  path        String            @default("default_path")
  permissions Permission[]
  parent      PermissionGroup?  @relation("PermissionGroupsToPermissionGroup", fields: [parentId], references: [id])
  children    PermissionGroup[] @relation("PermissionGroupsToPermissionGroup")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  createdAt    DateTime  @default(now())
  status       String?    
  username     String
  gender       String?    
  departmentId Int
  updatedAt    DateTime  @updatedAt
  hashedRt     String?
  isAdmin      Boolean   @default(false)
  avatar       String?
  articles     Article[]
  roles        Role[]    @relation("UserRoles")
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    Int?
  author      User?    @relation(fields: [authorId], references: [id])
}
